// An actual working configuration example..
// 
// time ./wekaMine/wekaMine -d ./data/vijver2002.tab -i ./data/vijver2002.clinical.tab -c ./cfg/vijver2002.cfg -m 200  -o ./results/vijver  
// 
// Expand section contains all the keyword and number range expansions that will generate a list of experiments.  That is, all 
// per-experiment variables will be documented in expand.  
expand{
    atSearch=['weka.attributeSelection.Ranker']  
    atEval=['weka.attributeSelection.GainRatioAttributeEval',
            //'weka.attributeSelection.OneRAttributeEval -S 1 -F 10 -B 6',
            //'weka.attributeSelection.InfoGainAttributeEval'            
    ]
      
    // Try 1st,2nd,3rd, and 4th degree polynomials kernels.  
    kernel = [
      'weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E {1,4,1}',
    ]
    
    // Try SMO with C values from 1 to 3, and for each of those try all four kernels specified in the kernel section 
    // This means 4*3 = 12 experiments already.
    //  
    // Note the quotes around the kernel.  This classifier string will be passed, unmodified, to weka, so it needs to be 
    // exactly the kind of string weka expects.  Weka needs quotes around the -K parameter to isolate the kernel 
    // options, and so we have to put quotes in our classifier string here. 
    classifier = [
        //'weka.classifiers.functions.SMO -M -C {1,3,1} -L 0.0001 -P 1.0E-12 -N 0 -V -1 -W 1 -K \"$kernel\"',
        //'weka.classifiers.trees.J48 -C 0.25 -M 2',
        'weka.classifiers.trees.RandomForest -I 2 -K 0 -S 1',
        //'weka.classifiers.misc.HyperPipes',
        //'weka.classifiers.bayes.NaiveBayes'
    ]
    
    // Clinical attributes to try to predict.  Can list them individually, or use keyword 'ALL' 
    // to indicate to classify on ALL clinical parameters. 
    classAttr = [
	'potency']
	
    // Different ways to discretize the class variable.  In this case it's all binary, but it could be 
    // some k-value discretization, or something continuous.  Last is a fixed cutoff split. 
    //discretization = ['0.9;1.1']
   discretization = ['none']
    
   // -1 says to let attribute eval choose number of attributes. 
   //numAttributes = ['20','100','200','1000','-1'] 
	 numAttributes = ['200']

    // An experiment specification is a string like:
    //
    // classifier, attributeSelection, attributeSelectionRanker,numAttributes, classAttribute , discretization
    // 
    // This will soon be replaced with a map  [classifier:$classifier, atEval:$atEval,numAttributes:-1,classAttr:$classAttr]
    // so that elements are keyed by name instead of fixed position and so that you can omit unused elements.  
    experiments = [
      '$atEval,$atSearch,$numAttributes,$classifier,$classAttr,$discretization'
    ]  
}

params{
	cvFolds = 5
}