// Usage:
// 
// time ./wekaMine/wekaMine -d ./data/vijver2002.tab -i ./data/vijver2002.clinical.tab -c ./cfg/vijver2002.cfg -m 200  -o ./results/vijver  
// 
// Expand section contains all the keyword and number range expansions that will generate a list of experiments.  That is, all 
// per-experiment variables will be documented in expand.  
expand{
	
			filter = ['None',
								'durbin.weka.ExponentialNormalizationFilter',
								'weka.filters.unsupervised.attribute.Normalize',
							  'weka.filters.unsupervised.attribute.Standardize',
								'weka.filters.unsupervised.attribute.Center',
								//'weka.filters.unsupervised.attribute.KernelFilter -K \"$kernel\"',  
								//'weka.filters.unsupervised.attribute.PrincipalComponents',							
			]
	
    atSearch=['weka.attributeSelection.Ranker']  
    atEval=[//'weka.attributeSelection.OneRAttributeEval -S 1 -F 10 -B 6',
            'weka.attributeSelection.InfoGainAttributeEval',
						// 'durbin.weka.FisherLDEval',  Doesn't handle missing values
						//'weka.attributeSelection.CfsSubsetEval',
						//'weka.attributeSelection.ReliefFAttributeEval -M -1 -D 1 -K 10',
						//'weka.attributeSelection.GainRatioAttributeEval'
    ]

		atSubsetSearch=['weka.attributeSelection.LinearForwardSelection',
											//'weka.attributeSelection.BestFirst',
											//'weka.attributeSelection.RandomSearch -F 1E-28',
											//'weka.attributeSelection.RandomSearch -F 1E-68'										
		]										
			
		atSubsetEval=[
				'weka.attributeSelection.CfsSubsetEval',
				'weka.attributeSelection.ConsistencySubsetEval'
		]
    
		// Grid serch values for the SVM C parameter and the RBF kernel Gamma parameter
		//CnGammaValsA = ['0.00001','0.0001','0.001','0.01','0.1','1','10','100','1000']
		//CnGammaValsA = ['0.00001','0.001','0.1','10','1000']
		CnGammaValsA = ['1000']
		//CnGammaValsA = ['0.00001','0.1','1000']
 
    // Try 1st,2nd,3rd, and 4th degree polynomial kernels.  
    kernel = [
      'weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E {1,2,1}',
			'weka.classifiers.functions.supportVector.RBFKernel -G 0.1'
    ]

		// Classifiers to use in meta-algorithms.
		subclassifier =[
		   'weka.classifiers.trees.DecisionStump',
		   //'weka.classifiers.functions.SMO -- -C $CnGammaVals -L 0.0010 -P 1.0E-12 -N 0 -V -1 -W 1',
		   //'durbin.weka.BalancedRandomForest -- -I 10 -B 0.5 -D',
			 //'weka.classifiers.trees.RandomForest',
			 //'weka.classifiers.trees.REPTree'
		]
    
   	// A Practical Guide to Support Vector Classification
		// Chih-Wei Hsu, Chih-Chung Chang, and Chih-Jen Lin
		// 
		// Gives a reasonable guide to the parameters of SVM optimization.  
		// 
		//smotolerance=['0.0001','0.00005']
		smotolerance=['0.0001']
		//Kval = ['2','3','4','5']
    classifier = [
	 		  'weka.classifiers.rules.ZeroR',  // e.g. majority classifier (mode, actually)
			  'weka.classifiers.rules.OneR',	 // Use single attribute...
        'weka.classifiers.functions.SMO -M -C $CnGammaValsA -L $smotolerance -P 1.0E-12 -N 0 -V -1 -W 1 -K "$kernel"',
        //'weka.classifiers.trees.J48 -C 0.25 -M 2',
 				'durbin.weka.BalancedRandomForest -I 10 -B 0.5 -D',
        //'weka.classifiers.trees.RandomForest',
				'weka.classifiers.functions.SimpleLogistic -I 0 -M 500 -H 50 -W 0.0',
				//'weka.classifiers.functions.LinearRegression',
        //                        'weka.classifiers.bayes.NaiveBayes',
				//'weka.classifiers.rules.JRip'
				//'weka.classifiers.functions.PLSClassifier',
				//'weka.classifiers.functions.RBFNetwork',
				//'weka.classifiers.lazy.IB1',
				//'weka.classifiers.lazy.IBk -K $Kval',
				//'weka.classifiers.lazy.KStar',
				//'weka.classifiers.lazy.LBR',
				'weka.classifiers.meta.AdaBoostM1 -P 100 -S 1 -I 10 -W "$subclassifier"',
				//'weka.classifiers.meta.Bagging -W "$subclassifier"',
				//'weka.classifiers.meta.Decorate -W "$subclassifier"',
				//'weka.classifiers.meta.RotationForest -W "$subclassifier"',
    ]
    
    // Clinical attributes to try to predict.  Can list them individually, or use keyword 'ALL' 
    // to indicate to classify on ALL clinical parameters. 
    //classAttr = ['TP53_mut']	
    classAttr = ['ALL']	
  
   // Different ways to discretize the class variable.  In this case it's all binary, but it could be 
   // some k-value discretization, or something continuous.  Last is a fixed cutoff split. 
   //discretization = ['median','quartile','4.99;5.0']

    // Or, if no discretization is desired, you can specify none or nominal: 
    // none means treat numbers as numeric and non-numbers as nominal
    // nominal means treat everything as nominal (i.e. numbers are nominal codes)
    discretization = ['none']
    
   // -1 says to let attribute eval choose number of attributes. 
   //numAttributes = ['5','10','20','50','100','200','1000','2000','4000','-1'] 
   numAttributes = ['5','10','20','50','100','200','500'] 

    // An experiment specification is a string like:
    //
    // attributeSelection, attributeSelectionRanker,numAttributes, classifier, classAttribute , discretization
    // 
    // This will soon be replaced with a map  [classifier:$classifier, atEval:$atEval,numAttributes:-1,classAttr:$classAttr]
    // so that elements are keyed by name instead of fixed position and so that you can omit unused elements.  
    experiments = [
      '$filter,$atEval,$atSearch,$numAttributes,$classifier,$classAttr,$discretization',
			'$filter,$atSubsetEval,$atSubsetSearch,$numAttributes,$classifier,$classAttr,$discretization'
    ]  
}

params{
	//censoredAttribute = "EVENTdeath"
  cvFolds = 10
	// -1 seed means seed with time clock...
	cvSeed = 11
}